# -*- coding: utf-8 -*-
"""比特幣分析.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VW8Z2fFzXSiMzkZFwufDGKjoUIpc-fz3
"""

pip install yfinance

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
def get_bitcoin_data():
    btc = yf.Ticker("BTC-USD")

    hist = btc.history(period="6mo", interval="1h")
    return hist



def strategy(bitcoin_data, total, ma_num, stop_earn):
    # 計算移動平均線
    bitcoin_data['MA'] = bitcoin_data['Close'].rolling(window=ma_num).mean()
    entry_price = 0
    min_price = 0
    max_price = 0
    state = 'wait_long'

    for i in range(ma_num - 1, len(bitcoin_data)):  # 從第 ma_num-1 行開始
        if state == 'wait_long':
            if bitcoin_data['Close'][i] > bitcoin_data['MA'][i]:
                max_price = bitcoin_data['Close'][i]
                entry_price = bitcoin_data['Close'][i]  # 記錄進場價格
                state = 'entry_long'  # 進場做多

        elif state == 'wait_short':
            if bitcoin_data['Close'][i] < bitcoin_data['MA'][i]:
                min_price = bitcoin_data['Close'][i]
                entry_price = bitcoin_data['Close'][i]  # 記錄進場價格
                state = 'entry_short'  # 進場做空

        elif state == 'entry_long':  # 進場做多
            if bitcoin_data['Close'][i] > max_price:
                max_price = bitcoin_data['Close'][i]
            if bitcoin_data['Close'][i] < max_price:
                total += bitcoin_data['Close'][i] - entry_price
                state = 'wait_short'
            elif bitcoin_data['Close'][i] - entry_price > stop_earn and stop_earn != 0:
                total += bitcoin_data['Close'][i] - entry_price
                state = 'wait_short'

        elif state == 'entry_short':  # 進場做空
            if bitcoin_data['Close'][i] < min_price:
                min_price = bitcoin_data['Close'][i]
            if bitcoin_data['Close'][i] > min_price:
                total += entry_price - bitcoin_data['Close'][i]
                state = 'wait_long'
            elif entry_price - bitcoin_data['Close'][i] > stop_earn and stop_earn != 0:
                total += entry_price - bitcoin_data['Close'][i]
                state = 'wait_long'

    return total

# 获取比特币数据
bitcoin_data = get_bitcoin_data()

# 初始参数设置
initial_total = 1000000
best_total = 0
best_ma = 0
best_stop_earn = 0

# 粗略搜索
for i in range(0, 2000, 100):
    for j in range(0, 2000, 100):
        tmp_total = strategy(bitcoin_data, initial_total, i, j)
        if tmp_total > best_total:
            best_total = tmp_total
            best_ma = i
            best_stop_earn = j

# 细致搜索
for i in range(best_ma - 100, best_ma + 100, 10):
    for j in range(best_stop_earn - 100, best_stop_earn + 100, 10):
        tmp_total = strategy(bitcoin_data, initial_total, i, j)
        if tmp_total > best_total:
            best_total = tmp_total
            best_ma = i
            best_stop_earn = j

print(f"Total: {best_total}, Best MA: {best_ma}, Best stop earn: {best_stop_earn}")

# 移動平均線
bitcoin_data['MA'] = bitcoin_data['Close'].rolling(window=best_ma).mean()

# 繪製價格和移動平均線圖
plt.figure(figsize=[15, 5])
plt.plot(bitcoin_data.index, bitcoin_data['Close'], label='USD')
plt.plot(bitcoin_data.index, bitcoin_data['MA'], label='Best Moving Average')
plt.title('Bitcoin Price and Moving Average')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.xlim([bitcoin_data.index[-30*24], bitcoin_data.index[-1]])  # 最近30天數據，假設一天24個數據點

# 設置 x 軸日期格式
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=1))  # 每天一個標記
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  # 日期格式
plt.gcf().autofmt_xdate()
